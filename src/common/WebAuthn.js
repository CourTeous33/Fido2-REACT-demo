
///////// START UTIL FUNCTIONS /////////
// easy way to go from string to ByteArray
const enc = new TextEncoder();

// another function to go from string to ByteArray, but we first encode the
// string as base64 - note the use of the atob() function
function strToBin(str) {
    return Uint8Array.from(atob(str), c => c.charCodeAt(0));
}

// function to encode raw binary to string, which is subsequently
// encoded to base64 - note the use of the btoa() function
function binToStr(bin) {
    return btoa(new Uint8Array(bin).reduce(
        (s, byte) => s + String.fromCharCode(byte), ''
    ));
}
///////// END UTIL FUNCTIONS /////////

///////// START WEBAUTHN FUNCTIONS /////////
const createCreds = async function(userName) {
    console.log(userName)
    ////// START server generated info //////
    // the below "publicKey" variable is typically generated by your server - here for DEMO purposes only
    const serverChall = "ThisIsTheOnlyKeyToVerifyYouAreAtTheRightPlace";
    const publicKey = {
        challenge: Uint8Array.from(
            serverChall, c => c.charCodeAt(0)),
        rp: {
            name: "Charles",
            id: "y33.ch",
        },
        user: {
            id: enc.encode(userName),
            name: userName,
            displayName: userName
        },
        authenticatorSelection: {
            authenticatorAttachment: "platform",
            userVerification: "preferred" ,
        },
        attestation: 'direct',
        pubKeyCredParams: [
            {
                type: "public-key", alg: -7 // "ES256" IANA COSE Algorithms registry
            }
        ],
        timeout: 60000,
    }

    console.log(publicKey)
    ////// END server generated info //////
    
    // browser receives the publicKey object and passes it to WebAuthn "create" API
    const res = await navigator.credentials.create({
        publicKey: publicKey
    })
    .catch((err) => {
        console.log(err);
        alert("failed");
        return;
    });

    console.log(res);
    alert("registed successful")

    // Below two lines store the most important info - the ID representing the created credentials
    // Typically they are sent via POST to your server, not stored locally - here for DEMO purposes only
    localStorage.setItem(userName, res.rawId);
    localStorage.setItem('id', binToStr(res.id));
        
}

const validateCreds = async function(userName){
    
    ////// START server generated info //////
    // Usually the below publicKey object is constructed on your server
    // here for DEMO purposes only
    const rawId = localStorage.getItem(userName);
    if (rawId == null) {
        alert("Invalid user name");
        return;
    }
    const AUTH_CHALLENGE = 'ThisIsTheOnlyKeyToVerifyYouAreAtTheRightPlace'
    const publicKey = {
        // your domain
        rpId: "y33.ch",
        // random, cryptographically secure, at least 16 bytes
        challenge: enc.encode(AUTH_CHALLENGE),
        allowCredentials: [{
          id: rawId,
          type: 'public-key'
        }],
        authenticatorSelection: {
            authenticatorAttachment: "platform",
        },
    };
    ////// END server generated info //////

    // browser receives the publicKey object and passes it to WebAuthn "get" API
    const res = await navigator.credentials.get({
        publicKey: publicKey
    })

    
    console.log(res);

    // here we build an object containing the results, to be sent to the server
    // usually "extractedData" is POSTed to your server
    const extractedData = {
        id: res.id,
        rawId: binToStr(res.rawId),
        clientDataJSON: binToStr(res.response.clientDataJSON)
    }

    // Usually done on the server, this is where you make your auth checks
    // here for DEMO purposes only
    const dataFromClient = JSON.parse(atob(extractedData.clientDataJSON));
    const retrievedChallenge = atob(dataFromClient.challenge);
    const retrievedOrigin = dataFromClient.origin;

    // At MINIMUM, your auth checks should be:
    // 1. Check that the retrieved challenge matches the auth challenge you sent to the client, as we do trivially below
    // 2. Check that "retrievedOrigin" matches your domain - otherwise this might be a phish - not shown here
    console.log(retrievedChallenge);
    if (retrievedChallenge === AUTH_CHALLENGE){
        alert("Authorized");
    } else {
        alert("Unauthorized");
    }
}

///////// END WEBAUTHN FUNCTIONS /////////

export { createCreds, validateCreds }